version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: test-automation-db
    environment:
      POSTGRES_DB: test_automation
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_automation"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: test-automation-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: test-automation-backend
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/test_automation
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /dev:/dev  # Para acceso a dispositivos USB/Serie
    privileged: true  # Necesario para acceso a hardware
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - test-network
    restart: unless-stopped

  # Frontend React (desarrollo)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: test-automation-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    networks:
      - test-network
    restart: unless-stopped

networks:
  test-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local